---
import { SvgReact } from '../icons/SvgReact'
import { SvgTailwind } from '../icons/SvgTailwind'
import { SvgRedux } from '../icons/SvgRedux'
import JosttStoreDescription from './JosttStoreDescription.astro'
---

<section
	class="min-w-6xl min-h-[600px] w-full overflow-hidden rounded-2xl bg-[#0253bb]"
>
	<div
		class="grid place-content-center gap-3 lg:grid-cols-[815px_427px] lg:grid-rows-1 lg:p-5"
	>
		<div class="h-full w-auto overflow-hidden rounded-xl shadow-md">
			<picture class="h-full w-auto">
				<img
					class="h-full w-auto object-contain"
					src="/projects/1-desktop.png"
					alt=""
				/>
			</picture>
		</div>
		<div
			class="image-slider grid h-full w-auto grid-cols-[auto_1fr_auto] justify-center gap-2 px-2"
		>
			<button type="button" class="prev h-12 w-12 self-center rounded-full">
				<svg viewBox="0 0 22 22">
					<path
						fill="none"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m12 15-4-4 4-4"></path>
				</svg>
			</button>
			<div class="image-container relative rounded-xl shadow-md">
				<span
					class="image-counter absolute right-0 top-0 z-10 m-2 flex items-center rounded-xl border border-solid border-white bg-black/40 px-2 align-middle text-sm leading-normal tracking-widest text-white opacity-0 transition-all"
				></span>
				<div class="image-track mx-auto flex h-full w-auto">
					<picture class="w-full flex-[0_0_100%]">
						<img
							class="h-full w-full object-contain"
							src="/projects/1-mobile.png"
							alt=""
						/>
					</picture>
					<picture class="flex-[0_0_100%]">
						<img
							class="h-full object-contain"
							src="/projects/2-mobile.png"
							alt=""
						/>
					</picture>
					<picture class="flex-[0_0_100%]">
						<img
							class="h-full object-contain"
							src="/projects/3-mobile.png"
							alt=""
						/>
					</picture>
					<picture class="flex-[0_0_100%]">
						<img
							class="h-full object-contain"
							src="/projects/4-mobile.png"
							alt=""
						/>
					</picture>
					<picture class="flex-[0_0_100%]">
						<img
							class="h-full object-contain"
							src="/projects/5-mobile.png"
							alt=""
						/>
					</picture>
					<picture class="flex-[0_0_100%]">
						<img
							class="h-full object-contain"
							src="/projects/6-mobile.png"
							alt=""
						/>
					</picture>
				</div>
			</div>
			<button type="button" class="next h-12 w-12 self-center rounded-full">
				<svg viewBox="0 0 22 22">
					<path
						fill="none"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						d="m10 15 4-4-4-4"
					>
					</path>
				</svg>
			</button>
		</div>
	</div>
	<div class="flex flex-col gap-3 p-3 lg:flex-row lg:gap-5 lg:p-5">
		<JosttStoreDescription />
		<div
			class="flex place-content-around gap-10 rounded-xl bg-[#060808fa] p-4 shadow-md lg:w-20 lg:flex-col lg:place-content-center lg:place-items-center"
		>
			<SvgReact />
			<SvgTailwind />
			<SvgRedux />
		</div>
	</div>
</section>

<style>
	.image-slider {
		position: relative;
		width: 100%;
		max-width: 800px;
		margin: 0 auto;
	}

	.image-container {
		display: flex;
		overflow: hidden;
	}

	.image-track {
		display: flex;
		transition: transform 0.3s ease-in-out;
	}

	.image-track img {
		flex: 0 0 100%;
		max-width: 100%;
		height: auto;
	}

	.prev,
	.next {
		color: #fff;
		border: 1px solid #fff;
		background-color: rgba(0, 0, 0, 0.4);
		padding: 2px;
		opacity: 0.6;
	}

	.prev.active-button:hover,
	.next.active-button:hover {
		opacity: 1;
		cursor: pointer;
	}

	.disable-button {
		opacity: 0.6;
		cursor: not-allowed;
	}
</style>

<script>
	// Obtener referencias a los elementos del DOM
	const imageTrackElement =
		document.querySelector<HTMLDivElement>('.image-track')
	const prevBtnElement = document.querySelector<HTMLButtonElement>('.prev')
	const nextBtnElement = document.querySelector<HTMLButtonElement>('.next')
	const images = document.querySelectorAll<HTMLPictureElement>(
		'.image-track picture'
	)
	const imageCounter = document.querySelector<HTMLDivElement>('.image-counter')

	// Verificar si los elementos existen
	if (imageTrackElement && prevBtnElement && nextBtnElement && imageCounter) {
		const imageTrack = imageTrackElement
		const prevBtn = prevBtnElement
		const nextBtn = nextBtnElement

		let currentIndex = 0
		const containerWidth = imageTrack.offsetWidth
		let counterTimeout: ReturnType<typeof setTimeout> | null = null

		// Función para activar/desactivar el botón
		const toggleButton = (btn: HTMLButtonElement, isActive: boolean) => {
			btn.disabled = !isActive
			btn.classList.toggle('disable-button', !isActive)
			btn.classList.toggle('active-button', isActive)
		}

		// Función para manejar el estado de los botones
		const handleButtonState = () => {
			toggleButton(prevBtn, currentIndex !== 0)
			toggleButton(nextBtn, currentIndex !== images.length - 1)
		}

		const showImageCounter = (index: number) => {
			imageCounter.textContent = `${index + 1}/${images.length}`
			imageCounter.style.opacity = '1'

			if (counterTimeout) {
				clearTimeout(counterTimeout)
			}

			counterTimeout = setTimeout(() => {
				imageCounter.style.opacity = '0'
				counterTimeout = null
			}, 800)
		}

		handleButtonState()

		// Función para mostrar la siguiente imagen
		const showNextImage = () => {
			if (!nextBtn.disabled) {
				currentIndex = (currentIndex + 1) % images.length
				imageTrack.style.transform = `translateX(-${currentIndex * containerWidth}px)`
				showImageCounter(currentIndex)
				handleButtonState()
			}
		}

		// Función para mostrar la imagen anterior
		const showPrevImage = () => {
			if (!prevBtn.disabled) {
				currentIndex = (currentIndex - 1 + images.length) % images.length
				imageTrack.style.transform = `translateX(-${currentIndex * containerWidth}px)`
				showImageCounter(currentIndex)
				handleButtonState()
			}
		}

		// Agregar event listeners a los botones
		prevBtn.addEventListener('click', showPrevImage)
		nextBtn.addEventListener('click', showNextImage)
	} else {
		console.error('Uno o más elementos del carrusel no se encontraron.')
	}
</script>
